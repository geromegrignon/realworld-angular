// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  name      String          @unique
  members   CommunityRole[]
  Event     Event[]
}

model CommunityRole {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Event {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  date        DateTime
  location    String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  createdBy   User      @relation("createdEvents", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User?     @relation("updatedEvents", fields: [updatedById], references: [id])
  updatedById Int?
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  createdEvents Event[]         @relation("createdEvents")
  updatedEvents Event[]         @relation("updatedEvents")
  roles         CommunityRole[]
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
  USER
}
